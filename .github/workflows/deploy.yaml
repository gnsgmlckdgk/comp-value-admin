# name: Build and Push Docker Image to GHCR

# env:
#   REGISTRY: ghcr.io                       # 깃허브 컨테이너 저장소를 사용한다
#   IMAGE_NAME: gnsgmlckdgk/comp-value-admin # 이미지의 이름. 자신의 깃허브 유저명을 소문자로 추가한다.
#   VERSION: latest                         # 지금은 새 이미지를 latest로 태깅한다.

# on:
#   push:
#     branches: ["main"]
#   pull_request:
#     branches: ["main"]

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       # (1) 깃 리포지토리 체크아웃
#       - name: Check out repository code
#         uses: actions/checkout@v3

#       # (2) GHCR에 로그인
#       # PAT로 GHCR에 로그인
#       - name: Log in to GHCR using PAT
#         run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

#       # 3) 도커 이미지 빌드
#       #    - Dockerfile이 루트 경로에 있다고 가정
#       #    - 만약 하위 디렉토리에 있다면 -f ./frontend/Dockerfile 처럼 경로를 바꿔줄 수 있음
#       - name: Build Docker Image
#         run:  docker build -f docker/DockerFile -t ghcr.io/gnsgmlckdgk/comp-value-admin:latest .

#       # (4) GHCR로 push
#       - name: Push Docker Image
#         run: |
#           docker push ${{env.REGISTRY}}/${{ env.IMAGE_NAME }}:${{env.VERSION}}


name: Build and Push Multi-Arch Image to GHCR

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: gnsgmlckdgk/comp-value-admin
  VERSION: 0.0.1

jobs:
  build:
    # self-hosted ARM64 runner (ex. Mac M1)
    runs-on: self-hosted

    steps:
      # (1) 소스코드 체크아웃
      - uses: actions/checkout@v3

      # (2) QEMU 설정 (멀티 아키텍처 빌드를 위한 가상화)
      - name: Set up QEMU (for cross-build)
        uses: docker/setup-qemu-action@v2

      # (3) Docker Buildx 설정 (멀티 플랫폼 빌드를 위해 필요)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host  # 네트워크 이슈 방지 (e.g., timeout)
          use: true

      # (4) GHCR 로그인 (PAT 사용)
      - name: Login to GHCR
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      # (5) Docker 이미지 빌드 및 푸시 (linux/amd64 + linux/arm64), latest 태그 포함
      - name: Build and Push Multi-Arch Image (amd64 + arm64)
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg YARN_TIMEOUT=60000 \
            -f docker/DockerFile \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --push .

      # (6) Docker 캐시 및 GitHub Actions 작업공간 정리
      - name: Clean up Docker & workspace
        # 워크플로우 실패 여부와 관계없이 실행
        if: always()
        run: |
          docker system prune -af
          rm -rf "$RUNNER_WORKSPACE"
